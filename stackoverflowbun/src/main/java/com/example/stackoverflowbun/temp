package com.example.stackoverflowbun.controller;

import com.example.stackoverflowbun.entity.Answer;
import com.example.stackoverflowbun.service.AnswerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/answer")
public class AnswerController {

    @Autowired
    private AnswerService answerService;

    @ResponseBody
    @GetMapping("/getAllAnswers")
    public List<Answer> listAllAnswers(){
        List<Answer> answers = this.answerService.listAnswers();
        return answers;
    }

    @ResponseBody
    @GetMapping("/getAnswerById")
    public Answer listAnswerById(@RequestParam("id") Long id){
        Answer answer = this.answerService.listAnswerById(id);
        return answer;
    }

    @ResponseBody
    @PostMapping("/insertAnswer")
    public Answer insertAnswer(@RequestBody Answer answer){
        Answer answer1 = this.answerService.insertAnswers(answer);
        return answer1;
    }

    @ResponseBody
    @PutMapping("/updateAnswer")
    public Answer updateAnswer(@RequestBody Answer answer){
        Answer answer1 = this.answerService.insertAnswers(answer);
        return answer1;
    }

    @ResponseBody
    @DeleteMapping("/deleteAnswerById")
    public String deleteAnswerById(@RequestParam Long id){
        String string = this.answerService.deleteAnswerById(id);
        return string;
    }
}
package com.example.stackoverflowbun.controller;

import com.example.stackoverflowbun.entity.Question;
import com.example.stackoverflowbun.service.QuestionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/question")
public class QuestionController {

    @Autowired
    private QuestionService questionService;

    @ResponseBody
    @GetMapping("/getQuestions")
    public List<Question> getAllQuestions(){
        List<Question> questions = this.questionService.listQuestions();
        return questions;
    }

    @ResponseBody
    @GetMapping("/getQuestionById")
    public Question getUserById(@RequestParam("id") Long id){
        Question question = this.questionService.listQuestionById(id);
        return question;
    }
    @ResponseBody
    @PostMapping("/insertQuestion")
    public Question insertQuestion(@RequestBody Question question){
        Question question1 = this.questionService.insertQuestion(question);
        return question1;
    }

    @ResponseBody
    @PutMapping("/updateQuestion")
    public Question updateQuestion(@RequestBody Question question, Long id){
        Question question1 = this.questionService.updateQuestion(question, id);
        return question1;
    }

    @ResponseBody
    @DeleteMapping("/deleteQuestionById")
    public String deleteQuestionById(@RequestParam Long id){
        String string = this.questionService.deleteQuestionById(id);
        return string;
    }
}
package com.example.stackoverflowbun.controller;

import com.example.stackoverflowbun.entity.User;
import com.example.stackoverflowbun.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/user")
public class UserController {

    @Autowired
    public UserService userService;

    @ResponseBody
    @GetMapping("/getAllUsers")
    public List<User> listAllUsers(){
        List<User> user = this.userService.listUsers();
        return user;
    }

    @ResponseBody
    @GetMapping("/getUserById")
    public User listUserById(@RequestParam("id") Long id){
        User user = this.userService.listUserById(id);
        return user;
    }

    @ResponseBody
    @PostMapping("/insertUser")
    public User insertUser(@RequestBody User user){
        User user1 = this.userService.insertUser(user);
        return user1;
    }

    @ResponseBody
    @PutMapping("updateUser")
    public User updateUser(@RequestBody User user){
        User user1 = this.userService.insertUser(user);
        return user1;
    }

    @ResponseBody
    @DeleteMapping("/deleteUserById")
    public String deleteUserById(@RequestParam Long id){
        String string = this.userService.deleteUserById(id);
        return string;
    }
}
package com.example.stackoverflowbun.entity;

import jakarta.persistence.*;

import java.sql.Time;
import java.util.Date;

@Entity
@Table(name = "answer")
public class Answer {
    @Id
    @Column(name = "answer_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long answer_id;

    @JoinColumn(name = "author")
    @ManyToOne
    private User user;

    @Column(name = "text")
    private String text;

    @Column(name = "time")
    private Time time;

    @Column(name = "date")
    private Date date;

    @Column(name = "image")
    private byte[] image;

    public Answer() {

    }

    public Answer(Long answer_id, User user, String text, Time time, Date date, byte[] image) {
        this.answer_id = answer_id;
        this.user = user;
        this.text = text;
        this.time = time;
        this.date = date;
        this.image = image;
    }

    public Long getAnswer_id() {
        return answer_id;
    }

    public void setAnswer_id(Long answer_id) {
        this.answer_id = answer_id;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public Time getTime() {
        return time;
    }

    public void setTime(Time time) {
        this.time = time;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

}package com.example.stackoverflowbun.entity;

import jakarta.persistence.*;

import java.sql.Time;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "question")
public class Question {

    @Id
    @Column(name = "question_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long question_id;

    @JoinColumn(name = "author")
    @ManyToOne
    private User user;

    @Column(name = "title")
    private String title;

    @Column(name = "text")
    private String text;

    @Column(name = "date")
    private Date date;

    @Column(name = "time")
    private Time time;

    @Column(name = "image")
    private String image;

    @Column(name = "tags")
    private String tags;

    @JoinColumn(name = "answers")
    @OneToMany
    private List<Answer> answer;

    public Question(){

    }

    public Question(Long question_id, User user, String title, String text, Date date, Time time,String image,List<Answer> answer,String tags) {
        this.question_id = question_id;
        this.user = user;
        this.title = title;
        this.text = text;
        this.date = date;
        this.time = time;
        this.image = image;
        this.answer = answer;
        this.tags = tags;
    }

    public Long getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(Long question_id) {
        this.question_id = question_id;
    }

    public User getUser() {
        return user;
    }

    public List<Answer> getAnswer() {
        return answer;
    }

    public void setAnswer(List<Answer> answer) {
        this.answer = answer;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public Time getTime() {
        return time;
    }

    public void setTime(Time time) {
        this.time = time;
    }

    public String getTags() {
        return tags;
    }

    public void setTags(String tags) {
        this.tags = tags;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

}package com.example.stackoverflowbun.entity;

import jakarta.persistence.*;

@Entity
@Table(name = "user")
public class User {
    @Id
    @Column(name = "user_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long user_id;

    @Column(name = "last_name")
    private String last_name;

    @Column(name = "first_name")
    private String first_name;

    @Column(name = "city")
    private String city;

    @Column(name = "country")
    private String country;

    @Column(name = "email")
    private String email;

    @Column(name = "password")
    private String password;

    @Column(name = "number")
    private String number;

    public User() {

    }

    public User(Long user_id, String last_name, String first_name, String city, String country, String email, String password, String number) {
        this.user_id = user_id;
        this.last_name = last_name;
        this.first_name = first_name;
        this.city = city;
        this.country = country;
        this.email = email;
        this.password = password;
        this.number = number;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    public String getLast_name() {
        return last_name;
    }

    public void setLast_name(String last_name) {
        this.last_name = last_name;
    }

    public String getFirst_name() {
        return first_name;
    }

    public void setFirst_name(String first_name) {
        this.first_name = first_name;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }
}
package com.example.stackoverflowbun.repository;

import com.example.stackoverflowbun.entity.Answer;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface AnswerRepository extends CrudRepository<Answer, Long> {
}
package com.example.stackoverflowbun.repository;

import com.example.stackoverflowbun.entity.Question;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface QuestionRepository extends CrudRepository<Question, Long> {
}
package com.example.stackoverflowbun.repository;

import com.example.stackoverflowbun.entity.User;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends CrudRepository<User, Long> {
}
package com.example.stackoverflowbun.service;

import com.example.stackoverflowbun.entity.Answer;
import com.example.stackoverflowbun.entity.Question;
import com.example.stackoverflowbun.entity.User;
import com.example.stackoverflowbun.repository.AnswerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class AnswerService {

    @Autowired
    private AnswerRepository answerRepository;

    public List<Answer> listAnswers(){
        return (List<Answer>) this.answerRepository.findAll();
    }

    public Answer listAnswerById(Long id){
        Optional<Answer> answer = this.answerRepository.findById(id);

        if(answer.isPresent()){
            return answer.get();
        }else {
            return null;
        }
    }
    public Answer insertAnswers(Answer answer){
        return this.answerRepository.save(answer);
    }

    public String deleteAnswerById(Long id){
        try{
            this.answerRepository.deleteById(id);
            return "Deletion succesfuly";
        }catch(Exception e){
            return "Cannot delete answer with id " + id;
        }
    }
}
package com.example.stackoverflowbun.service;

import ch.qos.logback.core.encoder.EchoEncoder;
import com.example.stackoverflowbun.entity.Question;
import com.example.stackoverflowbun.entity.User;
import com.example.stackoverflowbun.repository.QuestionRepository;
import com.example.stackoverflowbun.repository.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class QuestionService {

    @Autowired
    private QuestionRepository questionRepository;
    @Autowired
    private UserRepository userRepository;

    public List<Question> listQuestions(){
        return (List<Question>) this.questionRepository.findAll();
    }

    public Question listQuestionById(Long id){
        Optional<Question> question = this.questionRepository.findById(id);

        if(question.isPresent()){
            return question.get();
        }else {
            return null;
        }
    }

    public Question insertQuestion(Question question){
        return this.questionRepository.save(question);
    }


    public Question updateQuestion(Question question, Long user_id) {
        User user = userRepository.findById(user_id).orElseThrow(() -> new EntityNotFoundException("User not found"));
        question.setUser(user);

        boolean questionExists = questionRepository.findById(question.getQuestion_id())
                .isPresent();

        if (!questionExists) {
            return null;
        }

        return questionRepository.save(question);
}

    public String deleteQuestionById(Long id){
        try{
            this.questionRepository.deleteById(id);
            return "Deletion succesfully!";
        }catch(Exception e){
            return "Cannot delete the user with id " + id;
        }
    }
}
package com.example.stackoverflowbun.service;

import com.example.stackoverflowbun.entity.User;
import com.example.stackoverflowbun.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    @Autowired
    public UserRepository userRepository;

    public List<User> listUsers(){
        return (List<User>) this.userRepository.findAll();
    }

    public User listUserById(Long id){
        Optional<User> user = this.userRepository.findById(id);

        if(user.isPresent()){
            return user.get();
        }else {
            return null;
        }
    }

    public User insertUser(User user){
        return this.userRepository.save(user);
    }

    public String deleteUserById(Long id){
        try{
            this.userRepository.deleteById(id);
            return "Deletion succesfully";
        }catch (Exception e){
            return "Failed to delete the user with id" + id;
        }
    }
}
package com.example.stackoverflowbun;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@SpringBootApplication
@EnableJpaRepositories
public class StackoverflowbunApplication {

    public static void main(String[] args) {
        SpringApplication.run(StackoverflowbunApplication.class, args);
    }

}
